#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        Third_Layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1 2 3 4>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <2>;
        scale-divisor = <3>;
        bindings = <&ib_toggle_layer 4>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 16>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <150>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;

            // hold, tap
        };

        td_cursor: td_scroll_or_cursor {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 6 ESC>, <&to 5>;

            // hold, tap, double_tap
        };

        httl: ht_two_layers {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
        };

        td_layers: td_layer_swap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 1>, <&to 2>;

            // tap, double_tap, tripple_tap
        };

        td_clk_scrl: td_click_or_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mkp RCLK>, <&mo 6>;

            // tap/hold, double_tap
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 0>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0>;
        };

        MiddleClick {
            bindings = <&mkp MCLK>;
            key-positions = <33 34>;
        };

        RightClick {
            bindings = <&mkp RCLK>;
            key-positions = <32 33>;
        };

        BASE_or_EXTRAS {
            bindings = <&td_bore>;
            key-positions = <38 39>;
        };

        LeftClick1 {
            bindings = <&mkp LCLK>;
            key-positions = <32 31>;
        };

        LeftClick2 {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        BackClick {
            bindings = <&mkp MB4>;
            key-positions = <31 30>;
        };

        ForwardClick {
            bindings = <&mkp MB5>;
            key-positions = <18 19>;
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define SYM     3
    // #define MOUSE   4
    // #define SLOW    5
    // #define SCROLL  6

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC         &kp Q  &kp W  &kp E               &kp R           &kp T              &kp Y        &kp U        &kp I      &kp O    &kp P            &kp BACKSPACE
&kp TAB         &kp A  &kp S  &kp D               &kp F           &kp G              &kp H        &kp J        &kp K      &kp L    &lt 5 SEMICOLON  &lt 6 SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C               &kp V           &kp B              &kp N        &kp M        &kp COMMA  &kp DOT  &lt 5 FSLH       &kp RIGHT_SHIFT
                              &hm LEFT_ALT SPACE  &hm LCMD ENTER  &hm LCTRL ENTER    &lt 2 ENTER  &lt 1 SPACE
            >;
        };

        NUM {
            bindings = <
&kp ESCAPE  &kp N1  &kp N2  &kp N3  &kp N4         &kp N5      &kp N6         &kp N7          &kp N8          &kp N9           &kp N0    &kp MINUS
&trans      &none   &none   &none   &kp BACKSPACE  &kp HOME    &kp PAGE_UP    &trans          &kp UP_ARROW    &trans           &trans    &trans
&trans      &none   &none   &none   &none          &kp END     &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp RBKT  &mt RIGHT_SHIFT LBKT
                            &trans  &trans         &trans      &kp ENTER      &kp RIGHT_ALT
            >;
        };

        SYMBOL {
            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp RS(N6)     &kp LS(N7)        &kp LS(N8)    &kp LS(NUMBER_9)  &kp LS(N0)  &kp BACKSPACE
&trans     &trans    &trans  &trans    &trans      &trans         &kp EQUAL      &kp LEFT_BRACKET  &kp RA(LBKT)  &kp RA(RBKT)      &kp GRAVE   &kp LS(GRAVE)
&trans     &trans    &trans  &trans    &trans      &trans         &kp LS(EQUAL)  &kp LS(MINUS)     &kp RA(APOS)  &kp RA(NUHS)      &trans      &trans
                             &trans    &trans      &trans         &trans         &trans
            >;
        };

        SYS {
            bindings = <
&bt BT_CLR   &bt BT_SEL 0  &bt BT_DISC 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none              &ext_power EP_ON  &ext_power EP_OFF  &none  &kp C_SLEEP
&bootloader  &trans        &trans         &trans        &trans        &trans          &none   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_MUTE         &none  &bootloader
&trans       &none         &none          &none         &none         &none           &none   &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT         &none  &trans
                                          &trans        &trans        &trans          &trans  &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SLOW {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mkp MB5  &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mkp MB4  &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &trans
                        &trans  &trans  &trans    &trans    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_SHIFT  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_SHIFT  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
